
#ifndef __TS3_SYSTEM_PERF_COUNTER_H__
#define __TS3_SYSTEM_PERF_COUNTER_H__

#include "prerequisites.h"
#include <ts3/stdext/chrono.h>

namespace ts3::system
{

	/// @brief Type used to represent the resolution of a PerfCounter.
	using perf_counter_res_t = uint64;

	/// @brief Type used to represent values of stamps generated by a PerfCounter.
	using perf_counter_value_t = uint64;

	class PerfCounter
    {
    public:
    /// @brief Queries and returns the current value of a system-specific, high-performance clock.
        /// Returned value should not be analysed or interpreted directly by the app - its unit is
        /// platform-specific and my yield number of ticks, nanoseconds or some other type of duration.
        TS3_SYSTEM_API_NODISCARD perf_counter_value_t queryCurrentStamp();

        /// @brief Returns the resolution of a counter as a number of units which elapse during a period of one second.
        TS3_SYSTEM_API_NODISCARD perf_counter_res_t queryResolution();

        /// @brief Converts a PC time stamp difference (difference between two PC stamps) to a duration value using specified unit ratio.
        /// Ratio represents a unit expressed as a fraction relative to a second. I.e. converting to nanoseconds
        /// would be done by calling: pfcConvertToDuration( timeStampDiff, std::make_pair( 1, 1000000000 ) );
        TS3_SYSTEM_API_NODISCARD long double convertToDuration( perf_counter_value_t pStampDiff, const std::pair<native_int, native_int> & pUnitRatio );

        /// @brief Converts a duration value back to a PC time stamp difference using specified unit ratio.
        /// Assertion: pfcConvertFromDuration( pfcConvertToDuration( timeStampDiff, R ), R ) == timeStampDeff for any given R.
        TS3_SYSTEM_API_NODISCARD perf_counter_value_t convertFromDuration( long double pDuration, const std::pair<native_int, native_int> & pUnitRatio );

        /// @brief Helper function which converts a perf counter duration to a duration value in unit expressed as ts3::DurationPeriod.
        template <DurationPeriod tpPeriod>
        TS3_SYSTEM_API_NODISCARD long double crmPerfCounterConvertToDuration( perf_counter_value_t pStampDiff )
        {
            return convertToDuration( pStampDiff, DurationTraits<tpPeriod>::unitRatio );
        }

        /// @brief Helper function which converts a duration value in unit expressed as ts3::DurationPeriod back to a PC time stamp difference.
        template <DurationPeriod tpPeriod>
        TS3_SYSTEM_API_NODISCARD perf_counter_value_t crmPerfCounterConvertFromDuration( const Duration<tpPeriod> & pDuration )
        {
            return convertFromDuration( pDuration.count(), DurationTraits<tpPeriod>::unitRatio );
        }
    };

} // namespace ts3::system

#endif // __TS3_SYSTEM_PERF_COUNTER_H__
