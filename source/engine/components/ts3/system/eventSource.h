
#ifndef __TS3_SYSTEM_EVENT_SOURCE_H__
#define __TS3_SYSTEM_EVENT_SOURCE_H__

#include "eventCommon.h"
#include "sysObject.h"

namespace ts3::system
{

	ts3SysDeclareHandle( EventController );

	class EventSource : public SysObject
	{
		friend class EventController;

	public:
		explicit EventSource( SysContextHandle pSysContext );
		virtual ~EventSource() noexcept;

		TS3_FUNC_NO_DISCARD void * getEventSourceNativeData() const;

		template <typename TpOutput>
		TS3_FUNC_NO_DISCARD TpOutput * getEventSourceNativeDataAs() const;

		TS3_FUNC_NO_DISCARD bool isPrimaryEventSource() const;

		TS3_FUNC_NO_DISCARD bool isLastEventSource() const;

	protected:
		virtual void onDestroySystemObjectRequested() override;

		void setEventController( EventControllerHandle pEventController );

		void setEventSourceNativeData( void * pNativeData );

		void resetEventSourceNativeData();

	private:
		// EventController which handles events generated by this source.
		// A single EventSource may be registered only in one controller at any given time.
		// NOTE: this is an active reference, so the controller is always accessible to a source object.
		EventControllerHandle _eventControllerActiveRef = nullptr;

		// Native data of this event source. This is actually a pointer to platform::EventSourceNativeData,
		// but the whole platform:: content is by default not visible in the public part of the library.
		// Actual event sources (Window, GLSurface, etc.) set this on construction.
		void * _eventSourceNativeData;
	};

	template <typename TpOutput>
	inline TpOutput * EventSource::getEventSourceNativeDataAs() const
	{
		return static_cast<TpOutput *>( getEventSourceNativeData() );
	}

} // namespace ts3::system

#endif // __TS3_SYSTEM_EVENT_SOURCE_H__
