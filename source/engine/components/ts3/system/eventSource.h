
#ifndef __TS3_SYSTEM_EVENT_SOURCE_H__
#define __TS3_SYSTEM_EVENT_SOURCE_H__

#include "eventCommon.h"
#include "sysObject.h"

namespace ts3::system
{

    ts3SysDeclareHandle( EventController );

    struct EventSourceInternalDataDeleter
    {
        using DeleteCallback = std::function<void( void * )>;

        DeleteCallback deleteCallback;

        EventSourceInternalDataDeleter()
        : deleteCallback( []( void * ) -> void {} )
        {}

        template <typename TpCallback>
        explicit EventSourceInternalDataDeleter( TpCallback pCallback )
        : deleteCallback( std::forward<TpCallback>( pCallback ) )
        {}

        template <typename TpCallback, typename... TpArgs>
        explicit EventSourceInternalDataDeleter( TpCallback pCallback, TpArgs && ...pArgs )
        : deleteCallback( std::bind( pCallback, std::forward<TpArgs>( pArgs )... ) )
        {}

        void operator()( void * pDataPtr ) const
        {
            deleteCallback( pDataPtr );
        }
    };

    using EventSourceInternalDataPtr = std::unique_ptr<void, EventSourceInternalDataDeleter>;

    class EventSource : public SysObject
    {
        friend class EventController;

    public:
        virtual ~EventSource() noexcept;

        TS3_FUNC_NO_DISCARD void * getEventSourceNativeData() const;

        template <typename TpOutput>
        TS3_FUNC_NO_DISCARD TpOutput * getEventSourceNativeDataAs() const
        {
            return static_cast<TpOutput *>( getEventSourceNativeData() );
        }

        TS3_FUNC_NO_DISCARD void * getEventSourcePlatformData() const;

        template <typename TpOutput>
        TS3_FUNC_NO_DISCARD TpOutput * getEventSourcePlatformDataAs() const
        {
            return static_cast<TpOutput *>( getEventSourcePlatformData() );
        }

    protected:
        EventSource( SysContextHandle pSysContext );

        void setEventSourceNativeData( EventSourceInternalDataPtr pNativeDataPtr );

        void setEventSourceNativeData( void * pNativeData, EventSourceInternalDataDeleter pDeleter = {} );

        void resetEventSourceNativeData();

    friendapi:
        void setEventController( EventControllerHandle pEventController );

        void setEventSourcePlatformData( EventSourceInternalDataPtr pPlatformDataPtr );

        void setEventSourcePlatformData( void * pPlatformData, EventSourceInternalDataDeleter pDeleter = {} );

        void resetEventSourcePlatformData();

    private:
        // EventController which handles events generated by this source.
        // A single EventSource may be registered only in one controller at any given time.
        // NOTE: this is an active reference, so the controller is always accessible to a source object.
        EventControllerHandle _eventControllerActiveRef = nullptr;

        EventSourceInternalDataPtr _eventSourceNativeData;

        EventSourceInternalDataPtr _eventSourcePlatformData;
    };

} // namespace ts3::system

#endif // __TS3_SYSTEM_EVENT_SOURCE_H__
