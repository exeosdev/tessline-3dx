
set( CM_EBS_SYSCONF__VARLIST
        CM_EBS_SYSCONF_HOST_COMPILER
        CM_EBS_SYSCONF_HOST_COMPILER_VERSION
        CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_EXT
        CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_PREFIX
        CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_EXT
        CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_PREFIX
        CM_EBS_SYSCONF_HOST_SYSTEM_NAME
        CM_EBS_SYSCONF_HOST_SYSTEM_VERSION
        CM_EBS_SYSCONF_HOST_TOOLSET_ARCH
        CM_EBS_SYSCONF_HOST_TOOLSET_ARCH_BIT

        CM_EBS_SYSCONF_TARGET_ARCH
        CM_EBS_SYSCONF_TARGET_ARCH_BIT
        CM_EBS_SYSCONF_TARGET_BUILDCONFIG
        CM_EBS_SYSCONF_TARGET_SYSTEM
        CM_EBS_SYSCONF_TARGET_PLATFORM
        CM_EBS_SYSCONF_TARGET_FLAG_ENABLE_DEBUGINFO
        CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_APPLE
        CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_MSE
        CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX
        CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_EXT
        CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_PREFIX
        CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_EXT
        CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_PREFIX
)

set( CM_EBS_DEF_REGEX_ARCH_LIST "arm32v7a|arm64v8a|aarch64|x86|IA32|Win32|x64|x86-64|IA64|Win64" )
set( CM_EBS_DEF_REGEX_ARCH_ARMF32 "^arm32v7a" )
set( CM_EBS_DEF_REGEX_ARCH_ARMF64 "^arm64v8a|^aarch64" )
set( CM_EBS_DEF_REGEX_ARCH_X86F32 "^x86$|^IA32$|^Win32$" )
set( CM_EBS_DEF_REGEX_ARCH_X86F64 "^x64$|^x86-64$|^IA64$|^Win64$" )
set( CM_EBS_DEF_REGEX_ARCH_32 "${_EBS_CDEF_MATCHSTR_ARCH_ARMF32}${_EBS_CDEF_MATCHSTR_ARCH_X86F32}" )
set( CM_EBS_DEF_REGEX_ARCH_64 "${_EBS_CDEF_MATCHSTR_ARCH_ARMF64}${_EBS_CDEF_MATCHSTR_ARCH_X86F64}" )
set( CM_EBS_DEF_REGEX_ARCH_ARMF "${_EBS_CDEF_MATCHSTR_ARCH_ARMF32}${_EBS_CDEF_MATCHSTR_ARCH_ARMF64}" )
set( CM_EBS_DEF_REGEX_ARCH_X86F "${_EBS_CDEF_MATCHSTR_ARCH_X86F32}${_EBS_CDEF_MATCHSTR_ARCH_X86F64}" )


function( ebsQueryHostSystemName outResult )
    if( CMAKE_HOST_SOLARIS )
        set( systemName "Solaris" )
    elseif( CMAKE_HOST_APPLE )
        if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin" )
            set( systemName "macOS" )
        else()
            set( systemName "iOS" )
        endif()
    elseif( CMAKE_HOST_UNIX )
        if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux" )
            set( systemName "Linux" )
        endif()
    elseif( CMAKE_HOST_WIN32 )
        if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" )
            set( systemName "WinDesktop" )
        endif()
    endif()
    if( systemName )
        set( ${outResult} "${systemName}" PARENT_SCOPE )
    endif()
endfunction()

function( ebsQueryTargetSystemName outResult )
    if( ANDROID )
        set( systemName "Android" )
    elseif( APPLE )
        if( ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" )
            set( systemName "macOS" )
        else()
            set( systemName "iOS" )
        endif()
    elseif( UNIX )
        if( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" )
            set( systemName "Linux" )
        endif()
    elseif( WIN32 )
        if( ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
            set( systemName "WinDesktop" )
        endif()
    endif()
    if( systemName )
        set( ${outResult} "${systemName}" PARENT_SCOPE )
    endif()
endfunction()

function( _ebsSysconfDetectHostCompiler )

    if( MINGW )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "MinGW" )
        #add_compile_options( "-std=c++${CXX_STANDARD}" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "armCC" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "armCC" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "Clang" )
        #add_compile_options( "-std=c++${CXX_STANDARD}" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "GCC" )
        #add_compile_options( "-std=c++${CXX_STANDARD}" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "ICC" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "NVIDIA" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "NVCUDA" )
    elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC" )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER "MSVC" )
        if( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "16\\.*"  )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2010 )
        elseif( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "17\\.*" )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2012 )
        elseif( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "18\\.*" )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2013 )
        elseif( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "19\\.0[0-9]*" )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2015 )
        elseif( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "19\\.1[1-9]*" )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2017 )
        elseif( "${CMAKE_CXX_COMPILER_VERSION}" MATCHES "19\\.2[0-4]*" )
            setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION 2019 )
        endif()
    endif()

    if( NOT CM_EBS_SYSCONF_HOST_COMPILER_VERSION )
        setInternal( CM_EBS_SYSCONF_HOST_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION} )
    endif()

    if( CMAKE_GENERATOR_PLATFORM )
        if( "${CMAKE_GENERATOR}" MATCHES "Visual Studio" )
            if( "${CMAKE_GENERATOR_PLATFORM}" MATCHES "^arm$" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH arm )
            elseif( "${CMAKE_GENERATOR_PLATFORM}" MATCHES "arm64" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH arm64 )
            elseif( "${CMAKE_GENERATOR_PLATFORM}" MATCHES "IA32|^x86$|^X86$" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH x86 )
            elseif( "${CMAKE_GENERATOR_PLATFORM}" MATCHES "Win64|x86_64|X86_64" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH x86-64 )
            endif()
        endif()
    else()
        if( "${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC" )
            if( "${CMAKE_MODULE_LINKER_FLAGS}" MATCHES "^arm$" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH arm )
            elseif( "${CMAKE_MODULE_LINKER_FLAGS}" MATCHES "arm64" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH arm64 )
            elseif( "${CMAKE_MODULE_LINKER_FLAGS}" MATCHES "x64|X64" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH x86-64 )
            elseif( "${CMAKE_MODULE_LINKER_FLAGS}" MATCHES "x86|X86" )
                setInternal( CM_EBS_SYSCONF_HOST_TOOLSET_ARCH x86 )
            endif()
        endif()
    endif()

    if( "${EBSVAR_Sysconf_Host_ToolsetArch}" MATCHES "${_EBS_CDEF_MATCH_STR_ARCH_32}" )
        setInternal( "CM_EBS_SYSCONF_HOST_TOOLSET_ARCH_BIT" "32" )
    elseif( "${EBSVAR_Sysconf_Host_ToolsetArch}" MATCHES "${_EBS_CDEF_MATCH_STR_ARCH_64}" )
        setInternal( "CM_EBS_SYSCONF_HOST_TOOLSET_ARCH_BIT" "64" )
    endif()

endfunction()

function( _ebsSysconfDetectHostPlatformSetup )
    # Get name of the host system.
    ebsQueryHostSystemName( hostSystemName  )
    if( NOT hostSystemName )
        message( FATAL_ERROR "The host system could not be determined." )
        return()
    endif()
    # Store the host name in the VMS registry.
    setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_NAME ${hostSystemName} )
    # Handle Windows family first. It's really optional, but I found the ability to check the exact version quite useful.
    if( ${CM_EBS_SYSCONF_HOST_SYSTEM_NAME} STREQUAL "WinDesktop" )
        if( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "10\\.0\\.[0-9]+(\\.[0-9]+)?" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 10.0 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.3\\.96[0-9]+" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 8.1U1 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.3\\.92[0-9]+" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 8.1 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.2\\.92[0-9]+" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 8.0 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.1\\.7601" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 7SP1 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.1\\.7600" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION 7 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.0\\.6002" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION VistaSP2 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.0\\.6001" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION VistaSP1 )
        elseif( ${CMAKE_HOST_SYSTEM_VERSION} MATCHES "6\\.0\\.6000" )
            setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION Vista )
        endif()
    endif()

    if( NOT CM_EBS_SYSCONF_HOST_SYSTEM_VERSION )
        setInternal( CM_EBS_SYSCONF_HOST_SYSTEM_VERSION "${CMAKE_HOST_SYSTEM_VERSION}" )
    endif()

    if( ${CM_EBS_SYSCONF_HOST_SYSTEM_NAME} MATCHES "Android|Linux" )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_EXT     .so )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_PREFIX  lib )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_EXT     .a )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_PREFIX  lib )
    elseif( ${CM_EBS_SYSCONF_HOST_SYSTEM_NAME} MATCHES "WinDesktop" )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_EXT     .dll )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_PREFIX  OFF )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_EXT     .lib )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_PREFIX  OFF )
    elseif( ${CM_EBS_SYSCONF_HOST_SYSTEM_NAME} MATCHES "macOS" )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_EXT     .dylib )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_SHARED_LIB_PREFIX  lib )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_EXT     .a )
        setInternal( CM_EBS_SYSCONF_HOST_PROP_STATIC_LIB_PREFIX  lib )
    endif()

endfunction()

function( _ebsSysconfDetectTargetPlatform )
    # Target system may be set via config for cross-compiling, check.
    if( NOT CM_EBS_SYSCONF_TARGET_SYSTEM )
        ebsQueryTargetSystemName( targetSystemName )
        setInternal( CM_EBS_SYSCONF_TARGET_SYSTEM ${targetSystemName} )
    endif()

    if( NOT CM_EBS_SYSCONF_TARGET_SYSTEM )
        message( FATAL_ERROR "Current platform (${CMAKE_SYSTEM_NAME}) is not supported." )
    endif()

    if( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "Android" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Android" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "android" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "arm32v7a" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "arm64v8a" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_GLAPI "EGL" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_ANDROID TRUE )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX TRUE )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_VULKAN TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "Linux" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Linux" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "linux" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "x86" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "x86_64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_GLAPI "GLX" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX TRUE )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_VULKAN TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "macOS" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Apple" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "macos" )
        if( TEMP_MACOS_BUILD_FOR_INTEL )
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "x86" )
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "x86_64" )
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_GLAPI "AGL" )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_APPLE TRUE )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX TRUE )
        else()
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "" )
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "arm64" )
            setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_GLAPI "AGL" )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_APPLE TRUE )
            setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX TRUE )
        endif()
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "iOS" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Apple" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "ios" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "" ) # 32 bit deprecated by Apple, not supported
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "arm64v8a" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_APPLE TRUE )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_POSIX TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "WinDesktop" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Windows" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "win32" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "x86" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "x86_64" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_GLAPI "WGL" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_MSE TRUE )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_VULKAN TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "WinPhone" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Windows" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "winphone" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "x86" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "x86_64" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_MSE TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "WinRT" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Windows" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "winrt" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "arm32v7a" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "" ) # WinRT is specifically desgined for 32-bit armv7
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "32" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_MSE TRUE )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" STREQUAL "WinUWP" )
        setInternal( CM_EBS_SYSCONF_TARGET_LIBRARY_SUBDIR  "winuwp" )
        setInternal( CM_EBS_SYSCONF_TARGET_PLATFORM  "Windows" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_32  "x86" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_64  "x86_64" )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT "64" )
        setInternal( CM_EBS_SYSCONF_TARGET_FLAG_OSINFO_MSE TRUE )
    endif()

    if( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" MATCHES "Android|Linux" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_EXT    ".so" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_PREFIX "lib" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_EXT    ".a" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_PREFIX "lib" )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" MATCHES "WinDesktop|WinPhone|WinRT|WinUWP" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_EXT    ".dll" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_PREFIX "" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_EXT    ".lib" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_PREFIX "" )
    elseif( "${CM_EBS_SYSCONF_TARGET_SYSTEM}" MATCHES "iOS|macOS" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_EXT    ".dylib" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_SHARED_LIB_PREFIX "lib" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_EXT    ".a" )
        setInternal( CM_EBS_SYSCONF_TARGET_PROP_STATIC_LIB_PREFIX "lib" )
    endif()

endfunction()

function( _ebsSysconfConfigureArch )
    if( CMAKE_CL_64 )
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_BIT 64 )
    else()
        setInternal( CM_EBS_SYSCONF_TARGET_ARCH_BIT ${CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_BIT} )
    endif()
    setInternal( CM_EBS_SYSCONF_TARGET_ARCH ${CM_EBS_SYSCONF_TARGET_ARCH_DEFAULT_${CM_EBS_SYSCONF_TARGET_ARCH_BIT}} )
endfunction()

function( _ebsSysconfConfigureBuildcfg )
    if( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
        setInternal( CM_EBS_SYSCONF_TARGET_BUILDCONFIG "Debug" )
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D DEBUG=1" )
    else()
        setInternal( CM_EBS_SYSCONF_TARGET_BUILDCONFIG "Release" )
    endif()
endfunction()


#@FunDef ebsSysconfInitialize
#@DocStr
function( ebsSysconfInitialize )
    clearInternalCache()

    _ebsSysconfDetectHostPlatformSetup()
    _ebsSysconfDetectHostCompiler()
    _ebsSysconfDetectTargetPlatform()
    _ebsSysconfConfigureArch()
    _ebsSysconfConfigureBuildcfg()

    foreach( variable ${CM_EBS_VARREG} )
        message( "${variable} -> ${${variable}}" )
    endforeach()
    message("OSX: ${CMAKE_OSX_ARCHITECTURES}")
endfunction()
